@page "/calendar"

<!--
    TODO: Create a Calendar using three lists and CSS:
    - List 1: Months, dependent on enum
    - List 2: Days, dependent on enum
    - List 3: Dates, numbers dependent on System.DateOnly and matching datetime format from API
    - CSS: Use CSS to style Calendar
        > Month on top
        > Days under Month spread out horizontally
        > Dates properly appearing under their corresponding day

    Interactive, can switch months and click on days.
    When a day is clicked:
        - Display a button to enter New Event page
        - Display Weather for that day or "Weather not available for this day"
        - Highlight Days with future Event
            > If Day has event, display button to enter EventViewer page for that Day instead
            > If Day has past event, display button to enter EventHistory for that Day instead

    Create Calendar here so it can be reused as a component.

    FOR Ishamjot:
    Focus on the CSS, dates haven't been set up yet but you can set them up if you want/have time.
    See if you can make each day a button that can be clicked.
-->
    <h1>Calendar </h1>
<h2>@DisplayMonthAndYear()</h2>
    <!--Buttons will appear as arrows for changing the month forwards or backwards-->
    <div class="nav-container">
    <button @onclick="ChangeToPreviousMonth" class="nav-button">
        <span class="bi bi-left-arrow-calendar"></span> 
    </button>
    <button @onclick="ChangeToNextMonth" class="nav-button">
        <span class="bi bi-right-arrow-calendar"></span>
    </button>
</div>

    <div class="Calendar-header">
    <ul class="week-container">
        <li>Sunday</li>
        <li>Monday</li>
        <li>Tuesday</li>
        <li>Wednesday</li>
        <li>Thursday</li>
        <li>Friday</li>
        <li>Saturday</li>
    </ul>
</div>
<div class="calendar-template">
        @foreach (var day in GetDaysInCurrentMonth())
        {
        @if (day != -1) 
        {
            <button class="date-button">@day</button>
        }
        else
        {
            <button class="date-button"></button>
           
        }
        }
    </div>


@code {
    // TODO: 
    // 1. Allow displayed month to be changed by buttons, use a bool to determine if calendar should display default month or not

    private DateTime currentDate = DateTime.Now;


    private void ChangeToNextMonth()
    {
        currentDate = currentDate.AddMonths(1);
    }

    private void ChangeToPreviousMonth()
    {
        currentDate = currentDate.AddMonths(-1);
    }

    private string DisplayMonthAndYear()
    {
        return currentDate.ToString("MMMM yyyy");
    }

    private List<int> GetDaysInCurrentMonth()
    {
        List<int> days = new List<int>();

        DateTime firstDayOfMonth = new DateTime(currentDate.Year, currentDate.Month, 1);
        int daysInMonth = DateTime.DaysInMonth(currentDate.Year, currentDate.Month);

        int dayOfWeek = (int)firstDayOfMonth.DayOfWeek;
        for (int i = 0; i < dayOfWeek; i++)
        {
            days.Add(-1); 
        }

        for (int day = 1; day <= daysInMonth; day++)
        {
            days.Add(day);
        }

        return days;
    }
}
