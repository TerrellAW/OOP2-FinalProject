@page "/calendar"

<!--
    TODO: Create a Calendar using three lists and CSS:
    - List 1: Months, dependent on enum
    - List 2: Days, dependent on enum
    - List 3: Dates, numbers dependent on System.DateOnly and matching datetime format from API
    - CSS: Use CSS to style Calendar
        > Month on top
        > Days under Month spread out horizontally
        > Dates properly appearing under their corresponding day

    Interactive, can switch months and click on days.
    When a day is clicked:
        - Display a button to enter New Event page
        - Display Weather for that day or "Weather not available for this day"
        - Highlight Days with future Event
            > If Day has event, display button to enter EventViewer page for that Day instead
            > If Day has past event, display button to enter EventHistory for that Day instead

    Create Calendar here so it can be reused as a component.

    FOR Ishamjot:
    Focus on the CSS, enums and dates haven't been set up yet but you can set them up if you want/have time.
    See if you can make each day a button that can be clicked.
-->

<h1>Calendar</h1>

<ul>
    <li>@monthEnum</li>
</ul>
<ul>
    <li>Sunday</li>
    <li>Monday</li>
    <li>Tuesday</li>
    <li>Wednesday</li>
    <li>Thursday</li>
    <li>Friday</li>
    <li>Saturday</li>
</ul>
@foreach (var date in month)
{
    <ul>
        <li></li>
    </ul>
}

@code {
    // TODO: 
    // 1. Find a way to get the current month's number
    // 2. Find a way to get the current year and account for leap years in a Month class method
    // 3. Find a way to get the first day of the month so it can be displayed properly on the calendar

    private void DisplayCurrentMonth()
    {
        DateList dateList = DateList.ExtractDates(FetchAPI.weatherList);

        EventDateTime currentDate = dateList.GetCurrentDate();
    }
}
