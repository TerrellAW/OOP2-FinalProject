<!-- Use _Imports.razor for all using directives -->

@page "/"

<h1 class="text-center">Event Management System</h1>

<Calendar />

@code
{
    // Special Task method that is called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // Ensures API is only fetched once and CWD is only set once
        if (FetchAPI.weatherList == null || FetchAPI.weatherList.IsEmpty() == true)
        {
            await FetchWeatherAPI();
            FetchDatabase();
        }
    }

    /// <summary>
    /// FetchWeatherAPI method fetches the weather API from the URL provided in the environment variables.
    /// 
    /// Steps:
    /// 1. Set CWD to the base directory of the application.
    /// 2. Load environment variables.
    /// 3. Fetch API using URL from environment variables.
    /// </summary>
    /// <returns>
    /// Task of type void.
    /// </returns>
    /// <exception cref="APIConnectionException">Thrown when the URL from the environment variables is not correctly loaded.</exception>
    private async Task FetchWeatherAPI()
    {
        // Set CWD, needed for API key
        var baseDir = AppDomain.CurrentDomain.BaseDirectory;
        Directory.SetCurrentDirectory(baseDir);

        // Check CWD, should be in ..\bin\Debug\net8.0-windows10.0.19041.0\win10-x64\AppX
        Debug.WriteLine($"CWD: {Directory.GetCurrentDirectory()}");
        Debug.WriteLine("Directory should lead to: ..\\bin\\Debug\\net8.0-windows10.0.19041.0\\win10-x64\\AppX");

        // Load environment variables
        Env.Load();

        // Fetch API URL
        var apiUrl = Environment.GetEnvironmentVariable("API_URL");

        // Check if API URL is null or empty
        if (string.IsNullOrEmpty(apiUrl))
        {
            throw new APIConnectionException("API URL is null or empty.");
        }
        else
        {
            // Fetch Weather API
            await FetchAPI.FetchWeather(apiUrl);
        }
    }
    private static void FetchDatabase()
    {
        // Load environment variables
        Env.Load();

        // Fetch Database connection string
        var dbConnString = Environment.GetEnvironmentVariable("CONNECTION_STRING");
        
        // Check if Database connection string is null or empty
        if (string.IsNullOrEmpty(dbConnString))
        {
            throw new DBConnectionException("Database connection string is null or empty.");
        }
        else
        {
            // Create Database
            DBManager.CreateDatabase(dbConnString);

            // Create Table
            DBManager.CreateTable(dbConnString);
        }
    }
}