@page "/event-viewer"
@inject NavigationManager NavigationManager

<h1 class="text-center">Event Viewer</h1>
<div>
    <!--
        If a specific event is selected, display the event details.
    -->
    @if (selectedEvent != null)
    {
        <h2 class="text-center">Event Details</h2>
        <div>
            <h3>@selectedEvent.EventName</h3>
            <p>Date: @selectedEvent.EventDate</p>
            <p>Location: @selectedEvent.EventLocation</p>
            <p>Description: @selectedEvent.EventDescription</p>
        </div>
    }
    <h2 class="text-center">Events</h2>
    <ul>
        <!--
            Display all events in the events list.
        -->
        @foreach (var e in events)
        {
            <li>
                <button type="button" @onclick="() => HandleSelectEvent(e)" class="event-manager-button size-large text-center">@e.ToString()</button>
                <button type="button" @onclick="() => HandleRemoveEvent(e)" class="event-remove-button size-medium text-center">Remove</button>
            </li>
        }
    </ul>
</div>

@code {
    // Import EventName from the query string as a parameter
    [Parameter]
    [SupplyParameterFromQuery(Name = "SelectedEvent")]
    public string EventName { get; set; }

    private Event? selectedEvent;

    // List necessary for displaying events with a foreach loop
    private List<Event> events = new List<Event>();

    // OnParametersSet is called when the component is initialized or when the parameters are updated
    // Ensures up to date data from the database is displayed
    protected override void OnParametersSet()
    {
        // Read Database
        DBManager.ReadDatabase(MauiProgram.dbManager.DbConnString);

        // Populate events list
        PopulateEventList();

        if (!string.IsNullOrEmpty(EventName))
        {
            selectedEvent = events.FirstOrDefault(e => e.EventName == EventName);
        }

        base.OnParametersSet();
    }

    // Populate the events list with all events from the database
    private void PopulateEventList()
    {
        events = new List<Event>();
        events = Event.eventList.ListEvents();
        Debug.WriteLine($"Events in Event Viewer: {events.Count}");
    }

    // Event handler for selecting an event
    private void HandleSelectEvent(Event selected)
    {
        selectedEvent = selected;
        string url = $"/event-viewer?SelectedEvent={selected.EventName}";
        Debug.WriteLine($"Navigating to: {url}");
        NavigationManager.NavigateTo(url);
    }

    // Event handler for removing an event
    private void HandleRemoveEvent(Event selected)
    {
        DBManager.RemoveEvent(selected.EventName, selected.EventDate, MauiProgram.dbManager.DbConnString);
        DBManager.ReadDatabase(MauiProgram.dbManager.DbConnString);
        PopulateEventList();
        StateHasChanged();
    }
}
